version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    container_name: finflow-postgres
    environment:
      POSTGRES_DB: finflow
      POSTGRES_USER: finflow
      POSTGRES_PASSWORD: finflow
    ports:
      - "5432:5432" #local port: container port
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finflow -d finflow"]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: finflow-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  app:
    # Option A: build your Dockerfile at project root
    build: .
    # Option B (if you push an image): image: samwang/finflow:latest
    container_name: finflow-app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/finflow
      SPRING_DATASOURCE_USERNAME: finflow
      SPRING_DATASOURCE_PASSWORD: finflow
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      APP_JWT_SECRET: change-me
    ports:
      - "8080:8080"
    # If your Dockerfile copies the JAR to /app/app.jar, this is fine:
    # command: ["java", "-jar", "/app/app.jar"]

volumes:
  pgdata:
